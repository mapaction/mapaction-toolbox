r"ogr2ogr -overwrite -sql \"SELECT osm_id, osm_way_id," \
" name, building from 'lines' where 'building'='barn'\" -f "\
"\"ESRI Shapefile\" oxf_argi_bldg_ln_su_osm_pp.shp oxfordshire-latest.osm.pbf -lco "\
"\"SHP=lines\""

ogr2ogr -overwrite -sql "SELECT osm_id, osm_way_id, name, building from 'lines' where 'building'='barn'" -f "ESRI Shapefile" oxf_argi_bldg_ln_su_osm_pp.shp oxfordshire-latest.osm.pbf -lco "SHP=lines"


I've been exploring the conversion from OSM to shape file using your spreadsheet as a guide.

For clarity I'd suggest that there are a couple of changes we make to the spreadsheet itself; the Key column should be renamed "OSM_tag_name" and the Value column should be renamed "OSM_tag_value". I've used these new names in the text below:

Description of spreadsheet and how it defines the output shapefile
==================================================================
D1 - For each unique combination of "cat_val", "theme_val" and geometry type there should be a single shapefile output.
D2 - There can be multiple rows within the spreadsheet which match can match a single "cat_val", "theme_val" and geometry type combination.
D3 - Each shapefile should have the an attribute for each unique value in the "OSM_tag_name" column.
D4 - The features selected from the source osm.pbf file are selected using all possible combinations of "OSM_tag_name" and "OSM_tag_value" pairs, linked by the "OR" operator. For example for a single shapefile (ie cat_val=tran, theme_val=rds, can geom=ln) the following OSM_tag_name, OSM_tag_value pairs exist:

| OSM_tag_name | OSM_tag_value |
+--------------+---------------+
| highway      | motorway      |
| highway      | trunk         |
| highway      | primary       |
| highway      | secondary     |
| cycleway     | track         |

This would result in the select clause:
'where "highway"="motorway" OR "highway"="trunk" OR "highway"="primary" OR "highway"="secondary" OR "cycleway"="track"'

D5 - Exceptions to rule D4 are if the "OSM_tag_value" field has either of the values "User Defined" or "*", then the select clause should simple be that the OSM_tag_value for the relevant OSM_tag_name is not an empty string or null (depending on how ogr2ogr handles these values - see Q1). This can substituted all other clauses for the relevant OSM_tag_name. For example:

| OSM_tag_name | OSM_tag_value |
+--------------+---------------+
| highway      | primary       |
| highway      | user defined  |
| cycleway     | track         |

This would result in the select clause:
'where "highway" != "" OR "cycleway"="track"'
There is no need to include "highway"="primary" since this is covered by the "highway"!="" statement.

D6 - In some cases the values of OSM_tag_value column are not normalised and represent a comma  ',' or forward slash '/' separated list of possible values. These should be expanded prior constructing the select clause.



Questions - Things to test
==========================
Q1 - How does ogr2ogr handle empty string or null values? (See D5)
Q2 - How should OSM relationships be represented in shapefiles?


Process
=======
These are the steps that the script will need to take to create the required shapefiles:

- Check for the existence of these parameters and for valid values for each:
		Source_osm_pbf_file: full path to the file (which must exist!)
		Excel_config_file: full path to the file (which must exist!)
		Output_directory: full path to the directory in which to output the shapefiles (which must exist)
		GeoExtent_clause: a string to prefix the name of all the resultant shapefiles.
		Create_cat_directorys: a boolean to specify whether or not the script should create/use subdirectories for each data category
		Overwrite_shp: a boolean to specify whether or not to overwrite existing shapefiles
- Load the excel spreadsheet and check to confirm that it contains the right tables and columns.
- Copy the excel spreadsheet into an in-memory table-like structure (so that it can be manipulated), called "config_table"
- Normalise "config_table", with respect to geometry types. So that each row now only relates to a single shapefile, though there will be multiple rows for each shapefile.
- Add a column to "config_table" with the calculated shapefile name (shapefile_name).
- Create a table "shpf_list" of shapefile names, containing each name exactly once. There is a one-to-many mapping between shpf_list and config_table.

- Either of the next two options can be selected based on performance reasons

- For each shapefile (by iterating through each value in shpf_list);
	- If (shapefile does not exist) OR (shapefile does exist AND Overwrite_shp==True):
		- Create a subset of the config_table, which match the current shapefile, called subset_config_table.
		- Create the list of all attributes as a string of comma separated values ("atrb_str") to be included in the shapefile, by denormalising the list of unique values in the "OSM_tag_name" in "subset_config_table".
		- Create the select clause (select_str), by identifying unique pairs of OSM_tag_name/OSM_tag_value, excluding the cases where "OSM_tag_value" is "user defined" or "*"
		- Generate the entire ogr2ogr commandline (ogr_cmd_str) by including atrb_str, select_str, Source_osm_pbf_file, Output_directory, GeoExtent_clause. If Create_cat_directorys==true, the value of "cat_val" will be required.
		- Execute ogr_cmd_str catching any errors.
		
- For entire config_table table
	- Create the list of all attributes as a string of comma separated values ("atrb_str") to be included in the shapefile, by denormalising the list of unique values in the "OSM_tag_name" in "config_table", grouping by shapefile_name. Add this string as a new column (also called "atrb_str") to the table shpf_list.
	- Create the select clause (select_str), by identifying unique pairs of OSM_tag_name/OSM_tag_value, excluding the cases where "OSM_tag_value" is "user defined" or "*". Add this string as a new column (also called "select_str") to the table shpf_list.
	- Generate the entire ogr2ogr commandline (ogr_cmd_str) by including atrb_str, select_str, Source_osm_pbf_file, Output_directory, GeoExtent_clause. If Create_cat_directorys==true, the value of "cat_val" will be required. Add this string as a new column (also called "ogr_cmd_str") to the table shpf_list.
	- For each shapefile (by iterating through each value in shpf_list);
		- If (shapefile does not exist) OR (shapefile does exist AND Overwrite_shp==True):
		    - Execute ogr_cmd_str catching any errors.

==============
End of Process
	

